@using modulum.Client.Infrastructure.Managers
@inject NavigationHistoryService HistoryService

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="HandleNavigationAsync">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(Client.Shared.MainLayout)">
                <NotAuthorized>
                    <Modulum.Client.Pages.Authentication.Login />
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <CascadingAuthenticationState>
                <LayoutView Layout="@typeof(Client.Shared.NotFoundLayout)">
                    <p>Desculpe, não há nada neste endereço.</p>
                </LayoutView>
            </CascadingAuthenticationState>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Desculpe, não foi encontrado nada nede endereço</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

<!--<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            @RouterWithLayout(typeof(Client.Shared.MainLayout))
        </Authorized>
        <NotAuthorized>
            @RouterWithLayout(typeof(Client.Shared.MainLayout))
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>-->

@code {

    protected override void OnInitialized()
    {
        //_navigationManager.LocationChanged += (s, e) =>
        //{
        //    HistoryService.AddPage(_navigationManager.Uri);
        //};
    }

    private void Voltar()
    {
        var previous = HistoryService.GoBack();
        if (previous is not null)
            _navigationManager.NavigateTo(previous);
    }

    private async Task HandleNavigationAsync(Microsoft.AspNetCore.Components.Routing.NavigationContext args)
    {
        var uri = args.Path;

        // Só adiciona no histórico se não estiver voltando
        if (!HistoryService.IsNavigatingBack && !string.IsNullOrWhiteSpace(uri))
        {
            HistoryService.AddPage(uri);
        }

        // Após a navegação, limpa o estado de "voltando"
        HistoryService.ClearNavigatingBack();

        await Task.CompletedTask;
    }
    //RenderFragment RouterWithLayout(Type layoutType) => __builder =>
    //{
    //    <Router AppAssembly="@typeof(Program).Assembly">
    //        <Found Context="routeData">
    //            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@layoutType" />
    //            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    //        </Found>
    //        <NotFound>
    //            <PageTitle>Not found</PageTitle>
    //            <LayoutView Layout="@layoutType">
    //                <p>Sorry, there's nothing at this address.</p>
    //            </LayoutView>
    //        </NotFound>
    //    </Router>
    //};
}