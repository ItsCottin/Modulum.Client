@using modulum.Client.Infrastructure.Services
@inject NavigationHistoryService HistoryService

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="HandleNavigationAsync">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(Client.Shared.MainLayout)">
                <NotAuthorized>
                    <Modulum.Client.Pages.Authentication.Login />
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(Client.Shared.MainLayout)">
                <Modulum.Client.Shared.NotFoundLayout />
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {

    private void Voltar()
    {
        var previous = HistoryService.GoBack();
        if (previous is not null)
            _navigationManager.NavigateTo(previous);
    }

    private async Task HandleNavigationAsync(Microsoft.AspNetCore.Components.Routing.NavigationContext args)
    {
        var uri = args.Path;

        // Só adiciona no histórico se não estiver voltando
        if (!HistoryService.IsNavigatingBack && !string.IsNullOrWhiteSpace(uri))
        {
            HistoryService.AddPage(uri);
        }

        // Após a navegação, limpa o estado de "voltando"
        HistoryService.ClearNavigatingBack();

        await Task.CompletedTask;
    }
}