@page "/confirm-email"

@inject NavigationManager Navigation
@attribute [AllowAnonymous]
<h3>Confirmação de Email</h3>

<AuthorizeView Context="authContext">
    <Authorized>
        <div class="alert alert-success">Você está logado como @authContext.User.Identity?.Name.</div>
    </Authorized>
    <NotAuthorized>
        <div class="row">
            <div class="col-xxl-4 col-xl-5 col-lg-7 col-md-9 col-sm-11 col-xs-12">
                <section>
                    @if (loading)
                    {
                        <div class="alert alert-info">Carregando...</div>
                    }
                    else
                    {
                        @if (errors && !isSucesso)
                        {
                            @foreach (var error in errorList)
                            {
                                <div class="alert alert-danger">@error</div>
                            }
                        
                        } 
                        else
                        {
                            <div class="alert alert-success">E-mail ativado com sucesso, Entre agora no nosso sistema <a href="login">aqui</a></div>
                        }
                    }
                </section>
            </div>
            <div class="col-md-6 col-md-offset-2">
                <section>
            
                </section>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>
@code {


    [Parameter, SupplyParameterFromQuery]
    public string userId { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string token { get; set; }

    private string[] errorList = new string[] { };
    private bool errors => errorList.Length > 0;
    private bool loading;
    private bool isSucesso;

    protected override async Task OnInitializedAsync()
    {
        isSucesso = false;
        loading = true;
        var response = await _userManager.ConfirmEmail(userId, token);
        errorList = response.Messages.ToArray();
        isSucesso = response.Succeeded;
        loading = false;
        base.OnInitializedAsync();
    }
}
