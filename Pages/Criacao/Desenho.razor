<h3>Desenho</h3>

<MudContainer >

    <MudTextField Label="Título do Sistema" @bind-Value="tituloSistema" Variant="Variant.Filled" Class="mb-4" />

    <MudGrid>
        <MudItem xs="11">
            <MudDropContainer T="Campo" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.Status == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
                <ChildContent>
                    @foreach (var item in _sections)
                    {
                        <MudPaper Elevation="0" Width="100%" MinHeight="70px" Class="pa-4 ma-1 d-flex flex-column mud-background-gray rounded-lg">
                            <MudDropZone T="Campo" Identifier="@item.Status" Class="mud-height-full" />
                        </MudPaper>
                    }
                </ChildContent>
                <ItemRenderer>
                    <MudPaper Elevation="0" Class="pa-4 rounded-lg my-3">@context.Name</MudPaper>
                </ItemRenderer>
            </MudDropContainer>
        </MudItem>
        <MudItem xs="1" Class="d-flex flex-column justify-end align-end">
            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" />
            <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="delete" />
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="11" Class="d-flex justify-end align-end">
            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="DeleteSection" />
            <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="delete" OnClick="OnValidSectionSubmit" />
        </MudItem>
    </MudGrid>
</MudContainer>

@code {

    private string tituloSistema;

    // Nova logica
    private MudDropContainer<Campo> _dropContainer;  // é possivel realizar um "_dropContainer.Refresh();"

    private bool _addSectionOpen;
    /* handling board events */
    private void TaskUpdated(MudItemDropInfo<Campo> info)
    {
        info.Item.Status = info.DropzoneIdentifier;
    }

    /* Setup for board  */
    private List<Area> _sections = new()
        {
            new Area("To Do", String.Empty, 1),
            new Area("In Process", String.Empty, 1),
            new Area("Done", String.Empty, 1),
        };

    public class Area
    {
        public string Status { get; init; }
        public string Propriedades { get; init; }
        public int Tamanho { get; set; }

        public Area(string status, string propriedades, int tamanho)
        {
            Status = status;
            Propriedades = propriedades;
            Tamanho = tamanho;
        }
    }
    public class Campo
    {
        public string Name { get; init; }
        public string Propriedades { get; init; }
        public string Status { get; set; }

        public Campo(string name, string propriedades, string status)
        {
            Name = name;
            Propriedades = propriedades;
            Status = status;
        }
    }

    private List<Campo> _tasks = new()
        {
            new Campo("Nome","Nome","To Do"),
            new Campo("RA","RA","To Do"),
            new Campo("Data de Nascimento","Data de Nascimento","To Do"),
        };

    private void OnValidSectionSubmit()
    {
        _sections.Add(new Area("newSectionModel.Name", String.Empty, 1));
        _addSectionOpen = false;
    }

    private void OpenAddNewSection()
    {
        _addSectionOpen = true;
    }

    private void DeleteSection()
    {
        if (_sections.Count == 1)
        {
            _tasks.Clear();
            _sections.Clear();
        }
        else
        {
            int newIndex = _sections.Count - 1;
            if (newIndex < 0)
            {
                newIndex = 0;
            }

            _sections.RemoveAt(newIndex);
            @*var tasks = _tasks.Where(x => x.Status == section.Name);
			foreach (var item in tasks)
			{
				item.Status = _sections[newIndex].Name;
			}*@
        }
    }
}
