@page "/Account/Manage/SetPassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity

@* @inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager *@

<PageTitle>Definir senha</PageTitle>

<h3>Defina sua senha</h3>
<StatusMessage Message="@message" />
<p class="text-info">
    Você não possui um nome de usuário/senha local para este site. Adicionar um local
    conta para que você possa fazer login sem um login externo.
</p>
<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" placeholder="Por favor, digite sua nova senha." />
                <label for="new-password" class="form-label">Nova Senha</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" placeholder="Por favor, confirme sua nova senha." />
                <label for="confirm-password" class="form-label">Confirm password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Definir senha</button>
        </EditForm>
     </div>
</div>

@code {
    private string? message;
    //private ApplicationUser user = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        // var hasPassword = await UserManager.HasPasswordAsync(user);
        // if (hasPassword)
        // {
        //     RedirectManager.RedirectTo("Account/Manage/ChangePassword");
        // }
    }

    private async Task OnValidSubmitAsync()
    {
        // var addPasswordResult = await UserManager.AddPasswordAsync(user, Input.NewPassword!);
        // if (!addPasswordResult.Succeeded)
        // {
        //     message = $"Error: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
        //     return;
        // }

        // await SignInManager.RefreshSignInAsync(user);
        // RedirectManager.RedirectToCurrentPageWithStatus("Por favor, confirme sua nova senha.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "O {0} deve ter pelo menos {2} e no máximo {1} caracteres.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "A nova senha e a senha de confirmação não coincidem.")]
        public string? ConfirmPassword { get; set; }
    }
}