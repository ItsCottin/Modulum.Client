@inherits LayoutComponentBase

<MudPopoverProvider />
<MudSnackbarProvider />
<MudThemeProvider IsDarkMode="@_isDark" Theme="@SykiTheme" />
<MudDialogProvider CloseOnEscapeKey="true" CloseButton="true" />

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar Elevation="0" Dense="false" ToolBarClass="pl-1 pr-1">
                @if (_breakpoint != Breakpoint.Xs)
                {
                    <MudIconButton OnClick="@ToggleLeftOpen" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" />
                }
                <HomeButton />
                <MudSpacer />
                <NotificationsIconButton />
                <ThemeIconButton @bind-IsDark="@_isDark" OnClick="@ToggleTheme" />
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" Href="Account/Manage" />
                <MudIconButton Href="logout" Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" />
            </MudAppBar>
            <MudDrawer @bind-Open="@_leftOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
                <Modulum.Client.Shared.NavMenu />
            </MudDrawer>
            <MudDrawer Anchor="Anchor.Right" @bind-Open="@_rightOpen" ClipMode="DrawerClipMode.Always" Variant="DrawerVariant.Temporary" OverlayAutoClose="true" Elevation="2" Width="160px">
                <modulum.Shared.SettingsMenu />
            </MudDrawer>
            <MudMainContent Class="pb-12">
                @Body
                @if (_breakpoint == Breakpoint.Xs)
                {
                    <MudFab OnClick="@ToggleLeftOpen" Size="@Size.Large" Style="position:fixed; bottom:15px; right:25px;" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Menu" />
                }
            </MudMainContent>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        @if (IsAnonymous())
        {
            <MudAppBar Elevation="1" Dense="false">
                <MudStack Row="true" Class="d-flex justify-space-around flex-grow-1">
                    <HomeButton />
                    <MudSpacer />
                    <ThemeIconButton @bind-IsDark="@_isDark" OnClick="@ToggleTheme" />
                    <LoginButton />
                    <MudButton
                        Href="/register"
                        Target="_self"
                        IconSize="Size.Large"
                        Variant="Variant.Text"
                        Style="color: white; margin-left: -11px;"
                    >
                        Cadastro
                    </MudButton>
                </MudStack>
            </MudAppBar>
            <CascadingValue Name="IsDarkTheme" Value="@_isDark">
                <MudMainContent>
                    @Body
                </MudMainContent>
            </CascadingValue>
        }
        else
        {
            <modulum.Shared.RedirectLogin />
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private MudTheme SykiTheme = new MudTheme()
        {
            LayoutProperties = new LayoutProperties()
            {
                DrawerWidthLeft = "200px",
                DrawerWidthRight = "200px",
                DefaultBorderRadius = "12px",
            },
            Typography = new Typography()
            {

                Default = new DefaultTypography() { FontSize = "1.2rem", LetterSpacing = "0.05em" },
                H1 = new H1Typography() { FontSize = "2.5rem" },
                H2 = new H2Typography() { FontSize = "2rem" },
                H3 = new H3Typography() { FontSize = "1.8rem" },
                Button = new ButtonTypography() { FontSize = "1.1rem" },
                Body1 = new Body1Typography() { FontSize = "1.2rem" },
                Body2 = new Body2Typography() { FontSize = "1.1rem" },
                Caption = new CaptionTypography() { FontSize = "1rem" },
            },
            //Spacing = new Spacing()
            //{
                //Default = 8 // você pode aumentar esse valor para ter mais "espaço" entre elementos
            //}
            PaletteDark = new PaletteDark()
            {
                // Fundos
                Background = "#0d0d0d",       // Fundo geral bem escuro
                Surface = "#121212",          // Cards, containers
                DrawerBackground = "#0d0d0d", // Menu lateral (caso use)
                AppbarBackground = "#121212", // Top bar

                // Texto
                TextPrimary = "#f5f5f5",      // Branco quase puro para texto principal
                TextSecondary = "#c0c0c0",    // Cinza claro para subtítulos

                // Elementos de UI
                Primary = "#2e2e2e",          // Botões principais (cinza médio)
                Secondary = "#3a3a3a",        // Alternativo, menus, etc
                Info = "#6b7280",             // Cinza mais claro (informações)
                Success = "#10b981",          // Verde discreto
                Warning = "#f59e0b",          // Amarelo vibrante (alertas)
                Error = "#ef4444",            // Vermelho para erros

                // Bordas e linhas
                LinesDefault = "#2a2a2a",     // Borda padrão em cinza escuro
                Divider = "#1f1f1f",          // Linhas divisórias sutis

                // Interação
                ActionDefault = "#5e5e5e",    // Ícones inativos
                ActionDisabled = "#3a3a3a",   // Elementos desabilitados
                ActionDisabledBackground = "#1a1a1a",

                // Hover e efeitos
                HoverOpacity = 0.04f,
                OverlayDark = "#000000aa",   // Overlay escuro com opacidade
            },
        };

    private bool _isDark = true;
    private bool _leftOpen = true;
    private bool _rightOpen = false;
    private Breakpoint _breakpoint;

    private bool IsAnonymous()
    {
        var uri = _navigationManager.Uri.ToLower();
        return uri.EndsWith("/") || uri.Contains("register") || uri.Contains("login") || uri.Contains("reset-password");
    }

    private void ToggleLeftOpen()
    {
        _leftOpen = !_leftOpen;
    }

    private void ToggleRightOpen()
    {
        _rightOpen = !_rightOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        _breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        //var user = await AuthManager.GetUser();
        //if (user.Role.IsIn(UserRole.Teacher, UserRole.Student))
        //{
        //    SykiTheme.LayoutProperties.DrawerWidthLeft = "260px";
        //}
        //else
        //{
        //    SykiTheme.LayoutProperties.DrawerWidthLeft = "180px";
        //}
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await UpdateChartsTheme();
    }

    private async Task ToggleTheme()
    {
        _isDark = !_isDark;

        await UpdateChartsTheme();

        //await LocalStorage.SetItemAsync("IsDark", _isDark.ToString());
    }

    private async Task UpdateChartsTheme()
    {
        //var options = new ApexCharts.ApexChartBaseOptions
        //    {
        //        Theme = new ApexCharts.Theme
        //        {
        //            Mode = _isDark ? ApexCharts.Mode.Dark : ApexCharts.Mode.Light
        //        }
        //    };

        //await ApexChartService.SetGlobalOptionsAsync(options, true);
    }

    private async Task Logout()
    {
        _navigationManager.NavigateTo("/logout");
    }
    
}