@inherits LayoutComponentBase

<MudPopoverProvider />
<MudSnackbarProvider />
<MudThemeProvider IsDarkMode="@_isDark" />
<MudDialogProvider CloseOnEscapeKey="true" CloseButton="true" />

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar Elevation="0" Dense="false" ToolBarClass="pt-10 pb-10 pl-3">
                @if (_breakpoint != Breakpoint.Xs)
                {
                    <MudIconButton OnClick="@ToggleLeftOpen" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" />
                }
                <MudSpacer />
                <ThemeIconButton @bind-IsDark="@_isDark" OnClick="@ToggleTheme" />
                <HomeButton Rota="/System" />
            </MudAppBar>
            <MudDrawer @bind-Open="@_leftOpen" ClipMode="DrawerClipMode.Docked" Elevation="0" Class="" Variant="DrawerVariant.Responsive">
                <Modulum.Client.Shared.NavMenu />
            </MudDrawer>
            <MudMainContent Class="pb-12 pt-20">
                <MudStack Class="pa-10">
                        @Body
                </MudStack>
                @if (_breakpoint == Breakpoint.Xs)
                {
                    <MudFab OnClick="@ToggleLeftOpen" Size="@Size.Large" Style="position:fixed; bottom:15px; right:25px;" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Menu" />
                }
            </MudMainContent>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        @if (IsAnonymous())
        {
            <MudAppBar Elevation="0" Dense="false" ToolBarClass="pt-10 pb-10 pl-3">
                <VoltarButton />
                <MudSpacer />
                <ThemeIconButton @bind-IsDark="@_isDark" OnClick="@ToggleTheme" />
                <HomeButton Rota="/"/>
            </MudAppBar>
            <CascadingValue Name="IsDarkTheme" Value="@_isDark">
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="height: 100vh;">
                    <!-- MudBlazor não sabe lidar com height: 100vh;-->
                <!--<MudContainer Class="d-flex justify-center align-center" Style="height: 100vh;">
                   <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="min-vh-100 d-flex flex-column justify-content-center align-items-center overflow-auto">-->
                    @Body
                    <!-- </MudContainer>
                </MudContainer>-->
                </MudStack>
            </CascadingValue>
        }
        else
        {
            <modulum.Shared.RedirectLogin />
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private MudTheme ModulumTheme = new MudTheme()
        {

            LayoutProperties = new LayoutProperties()
            {
                DrawerWidthLeft = "300px",
                DrawerWidthRight = "300px",
                DefaultBorderRadius = "26px",
            },
            Typography = new Typography()
            {
                Default = new DefaultTypography() { FontSize = "1.2rem", LetterSpacing = "0.05em" },
                H1 = new H1Typography() { FontSize = "2.5rem" },
                H2 = new H2Typography() { FontSize = "2rem" },
                H3 = new H3Typography() { FontSize = "1.8rem" },
                Button = new ButtonTypography() { FontSize = "1.1rem" },
                Body1 = new Body1Typography() { FontSize = "1.2rem" },
                Body2 = new Body2Typography() { FontSize = "1.1rem" },
                Caption = new CaptionTypography() { FontSize = "1rem" },
            },
            PaletteDark = new PaletteDark()
            {
                // Fundos
                Background = "#000000",       // Fundo geral bem escuro
                Surface = "#1A1A1A",          // Cards, containers
                DrawerBackground = "#000000", // Menu lateral (caso use)
                AppbarBackground = "#000000", // Top bar

                // Texto
                TextPrimary = "#f5f5f5",      // Branco quase puro para texto principal
                TextSecondary = "#c0c0c0",    // Cinza claro para subtítulos

                // Elementos de UI
                Primary = "#9900ff",          // Botões principais (cinza médio)

                // Bordas e linhas
                LinesDefault = "#2d2d2d",     // Borda padrão em cinza escuro
                Divider = "#2d2d2d",          // Linhas divisórias sutis

                // Interação
                ActionDefault = "#5e5e5e",    // Ícones inativos
                ActionDisabled = "#3a3a3a",   // Elementos desabilitados
                ActionDisabledBackground = "#1a1a1a"
            }
        };

    private bool _isDark = true;
    private bool _leftOpen = true;
    private bool _rightOpen = false;
    private Breakpoint _breakpoint;

    private string SetRotaModulum()
    {
        if(IsAnonymous())
        {
            return "/";
        }
        else
        {
            return "/System";
        }
    }

    private bool IsAnonymous()
    {
        var uri = _navigationManager.Uri.ToLower();
        return uri.EndsWith("/") || uri.Contains("register") || uri.Contains("login") || uri.Contains("reset-password");
    }

    private void ToggleLeftOpen()
    {
        _leftOpen = !_leftOpen;
    }

    private void ToggleRightOpen()
    {
        _rightOpen = !_rightOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        _breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        //var user = await AuthManager.GetUser();
        //if (user.Role.IsIn(UserRole.Teacher, UserRole.Student))
        //{
        //    ModulumTheme.LayoutProperties.DrawerWidthLeft = "260px";
        //}
        //else
        //{
        //    ModulumTheme.LayoutProperties.DrawerWidthLeft = "180px";
        //}
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await UpdateChartsTheme();
    }

    private async Task ToggleTheme()
    {
        _isDark = !_isDark;

        await UpdateChartsTheme();

        //await LocalStorage.SetItemAsync("IsDark", _isDark.ToString());
    }

    private async Task UpdateChartsTheme()
    {
        //var options = new ApexCharts.ApexChartBaseOptions
        //    {
        //        Theme = new ApexCharts.Theme
        //        {
        //            Mode = _isDark ? ApexCharts.Mode.Dark : ApexCharts.Mode.Light
        //        }
        //    };

        //await ApexChartService.SetGlobalOptionsAsync(options, true);
    }

    private async Task Logout()
    {
        _navigationManager.NavigateTo("/logout");
    }
}