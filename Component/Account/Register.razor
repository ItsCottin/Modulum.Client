@page "/register"
@using modulum_client.Sevices

@inject IAccountManagement Acct

@if (success)
{
    <h3>Sucesso</h3>
}
else
{
    <h3>Cadastre-se</h3>
}

<AuthorizeView Context="authContext">
    <Authorized>
        <div class="alert alert-success">Você já está logado como @authContext.User.Identity?.Name.</div>
    </Authorized>
    <NotAuthorized>
        <div class="row">
            <div class="col-xxl-4 col-xl-5 col-lg-7 col-md-9 col-sm-11 col-xs-12">
                <section>
                    @if (success)
                    {
                        <div class="alert alert-success">Cadastro realizado com sucesso, Verifique a caixa de entrada do seu e-mail para mais informações ou clique nesse link para ativar seu email: <a href="@urlAtivaEmail">Aqui</a> </div>
                    }
                    else
                    {
                        if (errors)
                        {
                            foreach (var error in errorList)
                            {
                                <div class="alert alert-danger">@error</div>
                            }
                        }
                        <EditForm Model="Input" method="post" FormName="Cadastre-se">
                            <DataAnnotationsValidator />
                            <h2>Crie uma nova conta.</h2>
                            <hr />
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.Nome" class="form-control" autocomplete="" aria-required="true" placeholder="Nom Completo" />
                                <label for="nome">Nome Completo</label>
                            </div>
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                                <label for="email">Email</label>
                            </div>
                            <div class="form-floating mb-3">
                                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                                <label for="password">Senha</label>
                            </div>
                            <div class="form-floating mb-3">
                                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                                <label for="confirm-password">Confirme sua Senha</label>
                            </div>
                            <button class="w-100 btn btn-lg btn-primary" @onclick="DoRegisterAsync" disabled="@loading">
                                @if (loading)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                    @textoBotao
                                }
                                else
                                {
                                    @textoBotao
                                }
                            </button>
                        </EditForm>
                    }
                </section>
            </div>
            <div class="col-md-6 col-md-offset-2">
                <section>
                </section>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private String textoBotao = "Cadastrar";
    private bool success, errors;
    private string email = string.Empty;
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private string[] errorList = [];
    private string urlAtivaEmail = string.Empty;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    private bool loading;

    public async Task DoRegisterAsync()
    {
        loading = true;
        textoBotao = "  Cadastrando...";
        success = errors = false;
        errorList = [];

        if (string.IsNullOrWhiteSpace(Input.Email))
        {
            errors = true;
            errorList = ["E-mail é obrigatório"];
            loading = false;
            textoBotao = "Cadastrar";
            return;
        }

        if (string.IsNullOrWhiteSpace(Input.Password))
        {
            errors = true;
            errorList = ["Senha é obrigatório"];
            loading = false;
            textoBotao = "Cadastrar";
            return;
        }

        if (string.IsNullOrWhiteSpace(Input.ConfirmPassword))
        {
            errors = true;
            errorList = ["Por favor confirme sua senha"];
            loading = false;
            textoBotao = "Cadastrar";
            return;
        }

        if (Input.Password != Input.ConfirmPassword)
        {
            errors = true;
            errorList = ["Sua senha não é identica"];
            loading = false;
            textoBotao = "Cadastrar";
            return;
        }

        var result = await Acct.RegisterAsync(Input.Nome, Input.Email, Input.Password);

        if (result.Status)
        {
            success = true;
            Input.Email = Input.Password = Input.ConfirmPassword = string.Empty;
        }
        else
        {
            errors = true;
            errorList = [ result.Mensagem! ];
        }
        urlAtivaEmail = result.url!;
        textoBotao = "Cadastrar";
        loading = false;
    }

    private sealed class InputModel
    {
        public string Nome { get; set; } = "";
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
        public string ConfirmPassword { get; set; } = "";
    }
}
