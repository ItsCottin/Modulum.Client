@page "/register"
@using modulum_client.Sevices

@inject IAccountManagement Acct

<h3>Cadastre-se</h3>

<AuthorizeView Context="authContext">
    <Authorized>
        <div class="alert alert-success">Você já está logado como @authContext.User.Identity?.Name.</div>
    </Authorized>
    <NotAuthorized>
        @if (success)
        {
            <div class="alert alert-success">Você se registrou com sucesso. Agora você pode <a href="login">login</a>.</div>
        }
        else
        {
            if (errors)
            {
                foreach (var error in errorList)
                {
                    <div class="alert alert-danger">@error</div>
                }
            }
            <EditForm Model="Input" method="post" FormName="Cadastre-se">
                <DataAnnotationsValidator />
                <h2>Crie uma nova conta.</h2>
                <hr />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email">Email</label>
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="password">Senha</label>
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="confirm-password">Confirme sua Senha</label>
                </div>
                <button class="w-100 btn btn-lg btn-primary" @onclick="DoRegisterAsync" disabled="@loading">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                        @textoBotao
                    }
                    else
                    {
                        @textoBotao
                    }
                </button>
            </EditForm>
            <!--<div class="flex-outer">
                <div>
                    <label for="email">
                        Email:
                    </label>
                    <input autofocus autocomplete="on" required id="email" name="emailInput" placeholder="Enter your email address" type="email" @bind-value="email" />
                </div>
                <div>
                    <label for="password">
                        Senha:
                    </label>
                    <input required id="password" name="passwordInput" placeholder="Enter your password" type="password" @bind-value="password" /><br />
                </div>
                <div>
                    <label for="confirmPassword">
                        Confirme sua Senha:
                    </label>
                    <input required id="confirmPassword" name="confirmPasswordInput" placeholder="Re-enter your password" type="password" @bind-value="confirmPassword" />
                </div>
                <div>
                    <button class="btn btn-primary" @onclick="DoRegisterAsync">Register</button>
                </div>
            </div>-->
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private String textoBotao = "Cadastrar";
    private bool success, errors;
    private string email = string.Empty;
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private string[] errorList = [];

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    private bool loading;

    public async Task DoRegisterAsync()
    {
        loading = true;
        textoBotao = "  Cadastrando...";
        success = errors = false;
        errorList = [];

        if (string.IsNullOrWhiteSpace(Input.Email))
        {
            errors = true;
            errorList = ["E-mail é obrigatório"];
            loading = false;
            textoBotao = "Cadastrar";
            return;
        }

        if (string.IsNullOrWhiteSpace(Input.Password))
        {
            errors = true;
            errorList = ["Senha é obrigatório"];
            loading = false;
            textoBotao = "Cadastrar";
            return;
        }

        if (string.IsNullOrWhiteSpace(Input.ConfirmPassword))
        {
            errors = true;
            errorList = ["Por favor confirme sua senha"];
            loading = false;
            textoBotao = "Cadastrar";
            return;
        }

        if (Input.Password != Input.ConfirmPassword)
        {
            errors = true;
            errorList = ["Sua senha não é identica"];
            loading = false;
            textoBotao = "Cadastrar";
            return;
        }

        var result = await Acct.RegisterAsync(Input.Email, Input.Password);

        if (result.Succeeded)
        {
            success = true;
            Input.Email = Input.Password = Input.ConfirmPassword = string.Empty;
        }
        else
        {
            errors = true;
            errorList = result.ErrorList;
        }
        textoBotao = "Cadastrar";
        loading = false;
    }

    private sealed class InputModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
        public string ConfirmPassword { get; set; } = "";
    }
}
